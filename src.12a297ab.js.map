{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","element","document","querySelector","initTimer","currentDate","Date","now","time","getTime","intervalId","setInterval","clearInterval","timeComponentsValues","getTimeComponents","render","days","pad","Math","floor","hours","mins","secs","value","String","padStart","innerHTML","timer"],"mappings":";;;AA6DA,aA7DA,QAAA,mBAEA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBC,KAAAA,QAAUC,SAASC,cAAcJ,GACjCC,KAAAA,WAAaA,EAEbI,KAAAA,YAGPA,YACQC,MAAAA,EAAcC,KAAKC,MACrBC,IAAAA,EAAO,KAAKR,WAAWS,UAAYJ,EACjCK,MAAAA,EAAaC,YAAY,MAC7BH,GAAQ,KACG,IACTA,EAAO,EACPI,cAAcF,IAEVG,MAAAA,EAAuB,KAAKC,kBAAkBN,GAC/CO,KAAAA,OAAOF,IACX,KAGLC,kBAAkBN,GAKT,MAAA,CAAEQ,KAJI,KAAKC,IAAIC,KAAKC,MAAMX,EAAQ,QAI1BY,MAHD,KAAKH,IAAIC,KAAKC,MAAOX,EAAQ,MAAyB,OAG9Ca,KAFT,KAAKJ,IAAIC,KAAKC,MAAOX,EAAQ,KAAoB,MAElCc,KADf,KAAKL,IAAIC,KAAKC,MAAOX,EAAQ,IAAc,OAI1DS,IAAIM,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGnCV,QAAO,KAAEC,EAAF,MAAQI,EAAR,KAAeC,EAAf,KAAqBC,IAClB,OAAA,KAAKrB,QAAQyB,oFAEqBV,0IAKCI,0IAKDC,4IAKAC,wEAO9C,MAAMK,EAAQ,IAAI9B,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIM,KAAK","file":"src.12a297ab.js","sourceRoot":"../src","sourcesContent":["import './css/style.css';\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.element = document.querySelector(selector);\n    this.targetDate = targetDate;\n\n    this.initTimer();\n  }\n\n  initTimer() {\n    const currentDate = Date.now();\n    let time = this.targetDate.getTime() - currentDate;\n    const intervalId = setInterval(() => {\n      time -= 1000;\n      if (time < 0) {\n        time = 0;\n        clearInterval(intervalId);\n      }\n      const timeComponentsValues = this.getTimeComponents(time);\n      this.render(timeComponentsValues);\n    }, 1000);\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n  render({ days, hours, mins, secs }) {\n    return (this.element.innerHTML = `\n    <div class=\"field\">\n      <span class=\"value\" data-value=\"days\">${days}</span>\n      <span class=\"label\">Days</span>\n    </div>\n  \n    <div class=\"field\">\n      <span class=\"value\" data-value=\"hours\">${hours}</span>\n      <span class=\"label\">Hours</span>\n    </div>\n  \n    <div class=\"field\">\n      <span class=\"value\" data-value=\"mins\">${mins}</span>\n      <span class=\"label\">Minutes</span>\n    </div>\n  \n    <div class=\"field\">\n      <span class=\"value\" data-value=\"secs\">${secs}</span>\n      <span class=\"label\">Seconds</span>\n    </div>\n    `);\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('December 31, 2021'),\n});\n"]}